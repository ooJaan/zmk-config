/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "german-keymap.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <500>;
};

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            retro-tap;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <160>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;// <---[[right-hand keys]]
        };
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <160>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;// <---[[left-hand keys]]
        };
        ctl_pht: right_control_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP_Control";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <100>;// <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <39>;// <---[[ctl keys]]
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
 &kp ESC             &kp X          &kp V                  &kp L        &kp C       &kp W          &kp K           &kp H           &kp G    &kp F   &kp Q       &kp MINUS
 &kp TAB             &kp U          &kp I                  &kp A        &kp E       &kp O          &kp S           &kp N           &kp R    &kp T   &kp D           &kp Z
  &tog 4  &kp LEFT_BRACKET  &kp SEMICOLON  &hm LALT SINGLE_QUOTE  &hm LCTRL P  &hm LWIN Y     &hm RWIN B     &hm RCTRL M  &hm RALT COMMA  &kp DOT   &kp J  &mt RALT RIGHT
                                                  &lt 1 LEFT_WIN  &lt 2 ENTER   &kp SPACE  &kp BACKSPACE  &kp LEFT_SHIFT       &lt 4 DEL
            >;
        };

        layer_lower {
            bindings = <
      &kp F1      &kp F2      &kp F3    &kp F4             &kp F5        &kp F6         &kp F7              &kp F8    &kp F9          &kp F10        &kp F11       &kp F12
 &bootloader      &kp N1      &kp N2    &kp N3  &mt LEFT_SHIFT N4        &kp N5         &kp N6  &mt RIGHT_SHIFT N7    &kp N8           &kp N9         &kp N0  &bt BT_SEL 0
  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &kp LALT          &kp LCTRL  &kp LEFT_WIN  &kp RIGHT_WIN           &kp RCTRL  &kp RALT  &kp KP_MULTIPLY  &kp KP_DIVIDE  &bt BT_SEL 1
                                        &trans             &trans        &trans         &trans              &trans    &trans
            >;
        };

        layer_Layer__3 {
            bindings = <
       &tog 4    &kp C_PLAY_PAUSE        &kp UNDERSCORE               &kp DE_W_LBRC             &kp DE_W_RBRC  &kp DE_CIRC  &kp DE_EXLM              &kp DE_LABK                &kp DE_RABK             &kp DE_EQL       &kp DE_AMPR  &kp C_NEXT
 &kp C_VOL_UP  &hm LWIN DE_W_BSLS  &mt LEFT_ALT DE_SLSH  &mt LEFT_CONTROL DE_W_LCBR  &mt LEFT_SHIFT DE_W_RCBR  &kp DE_ASTR  &kp DE_QUES  &mt RIGHT_SHIFT DE_LPRN  &mt RIGHT_CONTROL DE_RPRN  &mt RIGHT_ALT DE_MINS  &hm LWIN DE_W_AT  &kp C_PREV
  &bootloader         &kp DE_HASH            &kp DE_DLR               &kp DE_W_PIPE             &kp DE_W_TILD  &kp DE_ACUT  &kp DE_PLUS              &kp DE_PERC                &kp DE_DQUO            &kp DE_QUOT       &kp DE_UNDS      &tog 3
                                                                             &trans                    &trans       &trans       &trans                   &trans                     &trans
            >;
        };

        layer_GAME {
            bindings = <
        &kp ESC  &kp N5   &kp Q   &kp W   &kp E      &kp R      &trans             &kp U       &kp I    &kp O         &kp P        &tog 3
 &kp LEFT_SHIFT  &kp N4   &kp A   &kp S   &kp D      &kp F       &kp H             &kp J       &kp K    &kp L  &kp C_VOL_UP  &kp C_VOL_DN
        &kp TAB  &kp N3   &kp Y   &kp X   &kp C      &kp V       &kp N             &kp M   &kp COMMA  &kp DOT      &kp LALT        &trans
                                 &kp N1  &kp N2  &kp SPACE  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT
            >;
        };

        nav {
            bindings = <
 &kp LEFT_SHIFT  &kp MINUS  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_MULTIPLY     &trans      &trans     &kp PG_DN     &kp PG_UP      &trans  &bootloader
       &kp LGUI   &kp PLUS  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6    &kp KP_DIVIDE   &kp HOME    &kp LEFT      &kp DOWN        &kp UP   &kp RIGHT      &kp END
      &kp LCTRL  &kp ENTER  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3           &tog 4  &kp PG_DN  &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV       &trans
                                               &kp DOT     &kp COMMA           &kp N0     &trans      &trans        &trans
            >;
        };

        Layer__5 {
            bindings = <
 &trans    &kp N1     &kp N2     &kp N3    &kp N4  &kp N5  &kp NUMBER_6    &kp N7    &kp N8  &kp N9     &kp N0   &trans
 &trans  &kp PLUS  &kp SLASH  &kp MINUS  &kp PLUS  &trans      &kp HOME  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp END
 &trans    &trans     &trans     &trans    &trans  &trans        &trans    &trans    &trans  &trans     &trans   &trans
                                 &trans    &trans  &trans        &trans    &trans    &trans
            >;
        };
    };
};
